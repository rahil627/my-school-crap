
/*
reads the virtual addresses, converts it into page references, and stores it in a queue (PRQ).
1) if the page exists in MM, do nothing
2) if the MM is empty, fill it in!
3) if the MM is full, replace page according to algorithm

FIFO
gimpy

MRU
as the algorithm reads PRQ, it puts the used PR's into a stack
therefore the top of the stack is the target for page replacement

LRU
it checks past page references (PRV) from the most recent to the least recent
if it exists in the MM then found[frame]=true.
the last page reference that matches MM found is the page to replace (target)

OPT

*/

extras

    /*
    //read test
    cout<<"page reference queue"<<endl;
    while(PRQ.empty()==false)
    {
        cout<<PRQ.front()<<",";
        PRQ.pop();
    }
    cout<<endl;
    */

    /*
    //virtual->physical address conversion - not necessary for the program
    //to test the first data (514)
    table[1]=3;//putting frame 3 into page 1

    int VA = VAqueue.front();
    VAqueue.pop();

    int page=VA/pageSize;

    int offset=VA%pageSize;
    //return the frame in that page
    int frame=table[page];
    //then return the phyiscal address using the frame and offset
    int PA=(frame*pageSize)+offset;//not necessary for the program
    cout<<PA;

    */


    //init
    //int table[100];//page table - ex. table[page] contains the frame, assume size = infinite?
    int MM[noOfFrames];/*[pageSize];*///memory allocated to the process - ex. mem[frame][offset] contains the physical address

