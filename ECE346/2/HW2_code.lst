C:\Documents and Settings\Rahil\My Documents\My School\ECE346\2\HW2_code.lst - generated by MGTEK Assembler ASM11 V1.26 Build 144 for WIN32 (x86) - Fri Feb 20 00:02:07 2009

    1:          =00000100              MAIN    EQU $0100
    2:          =00000000              DATA    EQU $0000
    3:          =0000FFCD              INCHAR  EQU $FFCD ;INCHAR inputs ASCII character to AccA and echo back, loops until it gets something
    4:          =0000FFB8              OUTA    EQU $FFB8 ;OUTA outputs AccA ASCII character to terminal
    5:          =0000002C              DELIM   EQU ','
    6:          =00001004              PORTB   EQU $1004
    7:          =0000100A              PORTE   EQU $100A
    8:                                 
    9:          =00000000                      ORG DATA
   10:     0000 43 68 61 72 61 63      PROMPT  FCC 'Character=>'
           0006 74 65 72 3D 3E 
   11:     000B 3E                     TERM1   FCB '>'
   12:     000C 23                     TERM2   FCB $23 ; HEX(23) = ASCII(#)  could have done FCB '#'
   13:     000D 30 31 32 33 34 35      DAT     FCB $30, $31 ,$32 ,$33, $34, $35, $36, $37, $38 ,$39, $41, $62, $43, $64, $45, $46, $67, $48, $50 ; Data starting from $02 until $13
           0013 36 37 38 39 41 62 
           0019 43 64 45 46 67 48 
           001F 50 
   14:     0020 C0 CF 92 86 8D A4      DAT2    FCB $C0, $CF, $92, $86, $8D, $A4, $A0, $CE, $80, $8C, $88, $A1, $F0, $83, $B0, $B8, $84, $89, $98 ; Hex value of displayed characters
           0026 A0 CE 80 8C 88 A1 
           002C F0 83 B0 B8 84 89 
           0032 98 
   15:                                 
   16:                                 
   17:          =00001004                      ORG PORTB
   18:     1004 FF                             FCB $FF    ; Put nothing in LED before program execution
   19:                                 
   20:          =00000100                      ORG MAIN
   21:                                                 
   22:                                 
   23:     0100 86 0A                  INPUT   LDAA #$000A  ; Load new line command
   24:     0102 BD FFB8                        JSR OUTA     ; Jump to sub routine OUTA
   25:     0105 CE 0000                        LDX #PROMPT  ; Load X with prompt text
   26:     0108 BD 0143                        JSR OUTSTR   ; Jump to OUTSTR function to output prompt text character by character
   27:                                         ;LDAA #$000A
   28:                                         ;JSR OUTA
   29:                                 
   30:     010B BD FFCD                        JSR INCHAR ; Jump to sub routine INCHAR
   31:     010E 91 0C                          CMPA TERM2  ; Compare it to the termination symbol  (A-$23)
   32:     0110 27 3E                          BEQ EXIT   ; If it is the same then exit (=0 ?) check Z CCR bit 
   33:                                 
   34:     0112 CE 001F                        LDX #$001F   ; Point X to the end of my data
   35:     0115 18CE 0032                      LDY #$0032   ; Point Y to the end of Hex data
   36:                                 
   37:     0119 E6 00                  COMP    LDAB 0, X  ; Load B with data where X is pointing
   38:     011B 11                             CBA        ; Compare B to A
   39:     011C 27 07                          BEQ OUTB   ; If they are the same, then print it out on PortB
   40:                                         
   41:     011E 09                             DEX        ; X = X -1 (Point X to the next value of my data)
   42:     011F 1809                           DEY        ; Y = Y -1 (Point X to the next value of my data)
   43:     0121 27 0F                          BEQ DECM   ; If X = 0 then no match was found, Go to DECM function to display DP
   44:     0123 20 F4                          BRA COMP   ; otherwise loop
   45:                                 
   46:     0125 18A6 00                OUTB    LDAA 0, Y
   47:                                         ;LDAB 0, Y  ;Try to Load the correct Hex display Character into B to be used in the DECM function
   48:     0128 B7 1004                        STAA PORTB ;Store A onto PortB  
   49:     012B 86 2C                          LDAA #DELIM;Load Accumlator A with #DELIM
   50:     012D BD FFB8                        JSR OUTA   ;Jump to sub routine OUTA
   51:     0130 20 CE                          BRA  INPUT  ;Go to the beginning
   52:                                         
   53:                                 
   54:     0132                        DECM     
   55:                                         ;NEGB           ; Complement B
   56:                                         ;ORAB #%1000000 ; 'OR' 1000000 onto B
   57:                                         ;NEGB           ; Complement B again to have last used Hex character on display with DP lit
   58:     0132 86 7F                          LDAA #$007F; Load Hex in A for Decimal light on 7-segment display (Decimal point means error message on 7-segment display)
   59:     0134 B7 1004                        STAA PORTB ; Put Decimal lightup onto PortB
   60:     0137 86 3F                          LDAA #$003F; Load Hex for "?" into A to display as error message on screen
   61:     0139 BD FFB8                        JSR OUTA   ; Jump to sub routine OUTA
   62:     013C 86 2C                          LDAA #DELIM; Load Accumlator A with #DELIM
   63:     013E BD FFB8                        JSR OUTA   ; Jump to sub routine OUTA
   64:     0141 20 BD                          BRA INPUT  ; Send back to beginning 
   65:                                 
   66:                                 
   67:     0143 A6 00                  OUTSTR  LDAA 0,X        ; Expecting that X points to the start of the data (prompt)
   68:     0145 91 0B                          CMPA TERM1      ; Compare character in prompt to termination character '>'
   69:     0147 27 06                          BEQ ENDSR       ; If true, end OUTSTR
   70:                                         
   71:     0149 BD FFB8                        JSR OUTA        ; Jump to sub routine OUTA
   72:     014C 08                             INX             ; Increment X
   73:     014D 20 F4                          BRA OUTSTR      ; Start OUTSTR loop over again until all characters are displayed to terminal
   74:                                 
   75:     014F 39                     ENDSR   RTS
   76:                                 
   77:     0150 3F                     EXIT    SWI        ;End 
   78:                                 

Symbols:
comp                            *00000119
data                            *00000000
decm                            *00000132
delim                           *0000002c
endsr                           *0000014f
exit                            *00000150
inchar                          *0000ffcd
input                           *00000100
main                            *00000100
outa                            *0000ffb8
outb                            *00000125
outstr                          *00000143
portb                           *00001004
prompt                          *00000000
term1                           *0000000b
term2                           *0000000c

