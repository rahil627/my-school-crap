C:\Documents and Settings\Rahil\My Documents\My School\ECE346\final\rahil.lst - generated by MGTEK Assembler ASM11 V1.26 Build 144 for WIN32 (x86) - Wed May 06 11:02:21 2009

    1:                                 *equates---------------------------------------------------------------------
    2:          =00000000              DATA    EQU     $0000   ;start of data segment
    3:          =00000100              MAIN    EQU     $0100   ;start of program segment
    4:                                 ;MAIN    EQU    $B600  ;From EEPROM
    5:                                 
    6:          =0000102B              BAUD    EQU     $102B
    7:                                 
    8:                                 *interrupts
    9:          =00001018              TOC2    EQU     $1018
   10:          =00001022              TMSK1   EQU     $1022
   11:          =00001023              TFLG1   EQU     $1023
   12:          =0000100E              TCNT    EQU     $100E
   13:          =000000DC              OC2_VEC EQU     $00DC
   14:          =000000E2              IC3_VEC EQU     $00E2
   15:          =000007D0              T_BASE2 EQU     2000  ; 1 ms
   16:          =0000C350              T_BASE3 EQU     50000 ; 25 ms
   17:                                 
   18:          =00001021              TCTL2   EQU     $1021   
   19:                                 
   20:                                 ;masks for manipulating output compare interrupts
   21:          =00000040              OC2F    EQU     %01000000
   22:          =00000040              OC2I    EQU     %01000000
   23:          =00000001              IC3     EQU     $01
   24:                                 
   25:                                 *LCD display
   26:          =0000100A              PORTE   EQU     $100A   ;display
   27:          =0000B5F0              COMBASE EQU     $B5F0   ;line?
   28:          =00000080              CONT1   EQU     $80     ;line 1
   29:          =000000C0              CONT2   EQU     $C0     ;line 2
   30:          =0000B5F1              DATBASE EQU     $B5F1   ;store on this
   31:          =00000004              INIT_LEN EQU    $04
   32:          =00000007              DATA_LEN EQU    $07
   33:          =00000000              CONT_LEN EQU    $00
   34:                                 ;D_COUNT        EQU     4
   35:                                 
   36:                                 *SCI system registers
   37:          =00001000              REG     EQU     $1000   ;portA - button/infrared
   38:          =0000102C              SCCR1   EQU     $102C   ;SCI Control Register 1
   39:          =0000102D              SCCR2   EQU     $102D   ;SCI Control Register 2
   40:          =0000002E              SCSR    EQU     $2E     ;SCI Status Register
   41:          =0000102F              SCDR    EQU     $102F   ;SCI Data Register
   42:                                 
   43:          =00000008              BIT3    EQU     %00001000
   44:          =00000020              BIT5    EQU     %00100000       ;receive data register full (RDRF)
   45:          =00000080              BIT7    EQU     %10000000       ;transmit data register empty (TDRE)
   46:          =00000004              BIT2    EQU     %00000100
   47:                                 
   48:          =000000C4              SCI_VEC EQU     $00C4
   49:                                 
   50:                                 *new
   51:          =0000FFB8              OUTA    EQU     $FFB8   ;not working :(
   52:          =000000FA              ONE_S   EQU     250     ;1s
   53:          =00000004              FOUR_MS EQU     4       ;4ms
   54:          =0000007E              TILDE   EQU     $7E
   55:                                 *data-------------------------------------------------------------------------
   56:          =00000000                      ORG Data
   57:     0000 +0001                  update  RMB 1
   58:     0001 +0001                  offset  RMB 1
   59:     0002 +0001                  CNTR    RMB 1 ;used for intterupt
   60:                                 
   61:     0003 38                     INIT_DATA FCB $38 ;function set
   62:     0004 38                             FCB $38 ;function set
   63:     0005 06                             FCB $06 ;Entry mode set
   64:     0006 01                             FCB $01 ;Clear display
   65:     0007 0F                             FCB $0F ;Display On/Off control
   66:                                 
   67:     0008 20 20 20 20 20 20      input   FCC '                #'
           000E 20 20 20 20 20 20 
           0014 20 20 20 20 23 
   68:     0019 20 20 20 20 20 20      word    FCC '                #'
           001F 20 20 20 20 20 20 
           0025 20 20 20 20 23 
   69:     002A 41                     char_r  FCC 'A'
   70:     002B 7E                     char_t  FCC '~' ;$41
   71:                                 
   72:                                 ;guesses        FCB $06 ;number of guesses
   73:     002C 44                     length  FCC 'D' ;length of word
   74:     002D 41                     length2 FCC 'A' ;length of input
   75:     002E 55                     pos     FCC 'U' ;position of letter
   76:                                 
   77:     002F 5A                     char_d  FCB $5A ;Z for debugging
   78:     0030 00                     count   FCB $00 ;counter
   79:     0031 00                     count2  FCB $00
   80:     0032 00                     count3  FCB $00
   81:                                 *main initializations-----------------------------------------------------------
   82:          =00000100                      ORG Main
   83:                                 
   84:                                 *JUMP TABLE INITIALIZATION
   85:     0100 CC 023E                        LDD #OC2_SVC    ;main interrupt  
   86:     0103 DD DD                          STD OC2_VEC+1 
   87:                                 
   88:     0105 CC 01D2                        LDD #SCI_ISR    ;SCI interrupts
   89:     0108 DD C5                          STD SCI_VEC+1
   90:                                 
   91:     010A CC 022F                        LDD #IC3_ISR    ;button
   92:     010D DD E3                          STD IC3_VEC+1
   93:                                 
   94:                                         ;clear for EEPROM?
   95:     010F 7F 0001                        CLR offset
   96:     0112 7F 0000                        CLR update
   97:                                 *Initialization of SCI registers
   98:     0115 7F 102C                        CLR SCCR1
   99:                                 
  100:     0118 86 30                          LDAA #$30       ;sets baud rate to 9600 (AxIDE default)
  101:                                         ;LDAA #$35      ;baud=300
  102:     011A B7 102B                        STAA BAUD
  103:                                         
  104:     011D 86 24                          LDAA #$24       ;00100100 - receive enable (RE) and receive interrupt enable (RIE), start with receive
  105:                                         ;LDAA #$28      ;00101000 - transmit enable (TE) and RIE
  106:     011F B7 102D                        STAA SCCR2
  107:                                         
  108:                                 *OC2/IC3 INTERRUPT INITIALIZATION       
  109:     0122 86 41                          LDAA    #OC2I  | IC3    ;enable OC2
  110:     0124 B7 1022                        STAA    TMSK1           
  111:     0127 B7 1023                        STAA    TFLG1
  112:     012A 86 11                          LDAA    #$11
  113:     012C B7 1021                        STAA    TCTL2 
  114:     012F 0E                             CLI                     ;clear interrupt mask                
  115:                                 
  116:                                 *LCD initialization sequence 
  117:     0130 C6 04                          LDAB    #INIT_LEN       ;4 hexes in init data
  118:     0132 CE 0003                        LDX     #INIT_DATA
  119:                                 
  120:     0135 A6 00                  M1      LDAA    0,X
  121:     0137 B7 B5F0                        STAA    COMBASE
  122:     013A BD 018B                        JSR     delay4
  123:     013D 08                             INX
  124:     013E 5A                             DECB
  125:     013F 2C F4                          BGE     M1              ;compare x to b
  126:                                 
  127:                                 *main code starts here--------------------------------------------------------
  128:                                         ;LDAA   #TILDE
  129:                                         ;LDAA   #'~'
  130:                                         ;STAA   SCDR
  131:                                         ;JSR    SCITX
  132:     0141 7D 0000                begin   TST     update  ;loop until button is pushed
  133:     0144 27 FB                          BEQ     begin
  134:                                 
  135:     0146 BD 0179                        JSR     line2   ;debug (display decimal)
  136:     0149 96 2E                          LDAA    pos
  137:     014B 8B 30                          ADDA    #$30
  138:     014D B7 B5F1                        STAA    DATBASE
  139:     0150 BD 018B                        JSR     delay4
  140:                                 
  141:                                 ;       JSR     line2   ;debug (display input)
  142:                                 ;       LDX     #input
  143:                                 ;       LDAA    0,X
  144:                                 ;loop4   STAA   DATBASE
  145:                                 ;       JSR     delay4
  146:                                 ;       INX
  147:                                 ;       LDAA    0,X
  148:                                 ;       CMPA    #'#'
  149:                                 ;       BNE     loop4
  150:                                 
  151:     0153 BD 0182                        JSR     line1   ;display word
  152:     0156 CE 0019                        LDX     #word
  153:     0159 A6 00                          LDAA    0,X
  154:     015B B7 B5F1                loop3   STAA    DATBASE
  155:     015E BD 018B                        JSR     delay4
  156:     0161 08                             INX
  157:     0162 A6 00                          LDAA    0,X
  158:     0164 81 23                          CMPA    #'#'
  159:     0166 26 F3                          BNE     loop3
  160:                                 
  161:     0168 BD 019D                        JSR     infra   ;input letter
  162:                                 
  163:     016B 7F 0000                        CLR     update
  164:     016E 20 D1                          BRA     begin
  165:                                 
  166:     0170 3F                             SWI             ;should not get here
  167:                                 *subroutines-----------------------------------------------------------------
  168:     0171 86 01                  refresh LDAA    #$01    ;refresh LCD
  169:     0173 B7 B5F0                        STAA    COMBASE
  170:     0176 BD 018B                        JSR     delay4
  171:                                         
  172:     0179 86 C0                  line2   LDAA    #CONT2  ;select line
  173:     017B B7 B5F0                        STAA    COMBASE
  174:     017E BD 018B                        JSR     delay4
  175:     0181 39                             RTS
  176:                                 
  177:     0182 86 80                  line1   LDAA    #CONT1  ;select line
  178:     0184 B7 B5F0                        STAA    COMBASE
  179:     0187 BD 018B                        JSR     delay4
  180:     018A 39                             RTS
  181:                                 
  182:     018B 86 04                  delay4  LDAA    #FOUR_MS ;4ms delay
  183:     018D 97 02                          STAA    CNTR
  184:     018F 96 02                  LOOPC2  LDAA    CNTR
  185:     0191 26 FC                          BNE     LOOPC2
  186:     0193 39                             RTS
  187:                                 
  188:     0194 86 FA                  delay1  LDAA    #ONE_S  ;1s delay
  189:     0196 97 02                          STAA    CNTR
  190:     0198 96 02                  LOOPC3  LDAA    CNTR
  191:     019A 26 FC                          BNE     LOOPC3
  192:     019C 39                             RTS
  193:                                 
  194:                                 ;infra  LDAA    REG
  195:                                 ;       CMPA    #$8A    ;if infrared, scroll
  196:                                 ;       BEQ     reset
  197:                                 ;       CMPA    #$89    ;if button, select
  198:                                 ;       BEQ     select
  199:                                 ;       BRA     infra
  200:                                 
  201:                                 ;reset  LDAB    #$41    ;reset alphabet
  202:                                 ;scroll CMPB    #$5B    ;if(letter==the char after Z) go to A
  203:                                 ;       BEQ     reset
  204:                                 ;       JSR     line2   ;uses accA
  205:                                 ;       STAB    DATBASE ;display
  206:                                 ;       JSR     delay1  ;uses accA
  207:                                 ;       JSR     delay1
  208:                                 
  209:                                 ;       LDAA    REG     ;if not infrared, stop & wait
  210:                                 ;       CMPA    #$88
  211:                                 ;       BEQ     infra
  212:                                 
  213:                                 ;       INCB            ;else loop
  214:                                 ;       BNE     scroll
  215:                                 
  216:     019D B6 1000                infra   LDAA    REG     ;if infrared
  217:     01A0 81 8A                          CMPA    #$8A
  218:     01A2 26 F9                          BNE     infra
  219:                                 
  220:                                 
  221:                                 ;while (portA=$89) scroll through alphabet [41-5A]
  222:                                 
  223:     01A4 C6 41                  reset   LDAB    #$41    ;reset alphabet
  224:     01A6 C1 5B                  scroll  CMPB    #$5B    ;if(letter==the char after Z) go to A
  225:     01A8 27 FA                          BEQ     reset
  226:     01AA BD 0179                        JSR     line2   ;uses accA
  227:     01AD F7 B5F1                        STAB    DATBASE ;display
  228:     01B0 BD 018B                        JSR     delay4  ;uses accA
  229:     01B3 BD 0194                        JSR     delay1  ;uses accA
  230:                                 
  231:     01B6 B6 1000                        LDAA    REG     ;if not infrared
  232:     01B9 81 88                          CMPA    #$88
  233:     01BB 27 03                          BEQ     select
  234:                                 
  235:     01BD 5C                             INCB            ;else loop
  236:     01BE 26 E6                          BNE     scroll
  237:                                 
  238:     01C0 D7 2B                  select  STAB    char_t
  239:                                 
  240:     01C2 39                     return  RTS
  241:                                 
  242:     01C3 BD 0171                debug   JSR     refresh
  243:     01C6 96 2F                          LDAA    char_d
  244:     01C8 B7 B5F1                        STAA    DATBASE
  245:     01CB 4A                             DECA
  246:     01CC 97 2F                          STAA    char_d
  247:     01CE BD 018B                        JSR     delay4
  248:     01D1 39                             RTS
  249:                                 
  250:                                 ;erase1 LDX     #input
  251:                                 ;erase  LDAA    #' '
  252:                                 ;       STAA    0,X
  253:                                 ;       INX
  254:                                 ;       CPX     #input+15
  255:                                 ;       BNE     erase
  256:                                 *hw5 solution-----------------------------------------------------------------
  257:                                 ;again  TST     update
  258:                                 ;       BEQ     again
  259:                                 
  260:                                 ;       JSR     refresh
  261:                                         
  262:                                 ;       LDX   #input    ;init input
  263:                                 ;       LDAA  0,X
  264:                                 ;M4      STAA  DATBASE  ;store input
  265:                                 ;       JSR   delay4        
  266:                                 ;        INX
  267:                                 ;       LDAA  0,X
  268:                                 ;       CMPA  #'#'
  269:                                 ;       BNE   M4
  270:                                 
  271:                                 ;       CLR     update
  272:                                 
  273:                                 ;       LDX     #input
  274:                                 ;erase  LDAA    #' '
  275:                                 ;       STAA    0,X
  276:                                 ;       INX
  277:                                 ;       CPX     #input+15
  278:                                 ;       BNE     erase
  279:                                         
  280:                                 ;       BRA     again
  281:                                 *interrupts------------------------------------------------------------------
  282:     01D2                        SCI_ISR ;checks this constantly
  283:                                         ;if receive data register is full, go to SCIRCV
  284:                                         ;if transmit data register is empty, go to SCITX
  285:     01D2 CE 1000                        LDX #REG
  286:                                         ;branch if all selected bits are set - BRSET opcode,operand_address,relative_offset
  287:     01D5 1E 2E 20 11                    BRSET SCSR,X, BIT5, SCIRCV ;checks to see if RDRF is set, meaning the hardware is ready to receive a character
  288:     01D9 1E 2E 80 01                    BRSET SCSR,X, BIT7, SCITX  ;checks to see if TDRE is set, meaning the hardware is ready to transmit a character
  289:     01DD 3B                             RTI
  290:                                 
  291:     01DE 96 2B                  SCITX   LDAA    char_t
  292:     01E0 B7 102F                        STAA    SCDR
  293:     01E3 1D 2D 88                       BCLR    SCCR2-REG,X,BIT7+BIT3   ;finished transmitting, set SCI mode to receive
  294:                                 
  295:     01E6 1C 2D 24                       BSET SCCR2-REG,X,BIT5+BIT2      ; Set to Receive
  296:     01E9 3B                             RTI
  297:                                 
  298:     01EA 1D 2D 24               SCIRCV  BCLR SCCR2-REG,X,BIT5+BIT2      ; Clear receive
  299:                                 
  300:                                 
  301:     01ED CE 0019                        LDX     #word   ;input=receive
  302:     01F0 F6 102F                        LDAB    SCDR
  303:                                                         
  304:     01F3 86 00                          LDAA    #$00    ;first time, store underscores
  305:     01F5 91 30                          CMPA    count
  306:     01F7 27 1A                          BEQ     s_len
  307:                                 
  308:                                 
  309:                                         ;BLO    fin     ;skip first 2 times
  310:                                         ;BEQ    s_len   ;third time: store length
  311:                                         ;else continue  ;after that, play game
  312:                                 
  313:                                 
  314:     01F9 C1 00                          CMPB    #0      ;if 0, get out
  315:     01FB 27 12                          BEQ     fin
  316:                                 
  317:                                 
  318:     01FD 86 00                          LDAA    #$00    ;if first number, store number of characters found in word
  319:     01FF 91 32                          CMPA    count3
  320:     0201 27 25                          BEQ     s_len2
  321:                                 
  322:                                         ;LDAA   #$00
  323:                                         ;STAA   bool9
  324:     0203 86 00                          LDAA    #$00
  325:     0205 97 32                          STAA    count3
  326:                                 
  327:     0207 D7 2E                          STAB    pos
  328:                                 
  329:                                         ;LDX    #input
  330:                                         ;LDAB   offset
  331:                                         ;ABX
  332:                                         ;STAA   0,X
  333:                                         ;INC    offset
  334:                                 
  335:     0209 3A                             ABX
  336:     020A 09                             DEX
  337:                                 
  338:     020B 96 2B                          LDAA    char_t  ;if not 0, add letter(s) to input
  339:     020D A7 00                          STAA    0,X
  340:                                         
  341:                                 
  342:                                 
  343:     020F 7C 0000                fin     INC update
  344:                                         ;CLR offset
  345:     0212 3B                             RTI
  346:                                 
  347:     0213                        s_len   ;LDAA   SCDR    ;b=SCDR, x=word
  348:     0213 D7 2C                          STAB    length  ;store length
  349:     0215 7C 0030                        INC     count
  350:                                 
  351:     0218 5A                             DECB            ;store underscores
  352:     0219 D7 31                  loopy   STAB    count2
  353:     021B 86 5F                          LDAA    #'_'
  354:     021D A7 00                          STAA    0,X
  355:     021F 08                             INX
  356:     0220 5A                             DECB
  357:     0221 7D 0031                        TST     count2
  358:     0224 26 F3                          BNE     loopy
  359:                                 
  360:     0226 27 E7                          BEQ     fin
  361:                                 
  362:     0228 7C 0032                s_len2  INC     count3
  363:     022B D7 2D                          STAB    length2
  364:     022D 27 E0                          BEQ     fin
  365:                                         
  366:                                         
  367:                                 
  368:     022F                        IC3_ISR                 ;button
  369:     022F CE 1000                        LDX #REG
  370:     0232 1C 2D 88                       BSET SCCR2-REG,X,BIT7+BIT3      ;set for tranmit
  371:     0235 B6 1023                        LDAA TFLG1
  372:     0238 9A 01                          ORAA IC3
  373:     023A B7 1023                        STAA TFLG1
  374:     023D 3B                             RTI
  375:                                 *interrupts------------------------------------------------------------------
  376:     023E 86 40                  OC2_SVC LDAA  #OC2F     ;SET UP TO 
  377:     0240 B7 1023                        STAA  TFLG1     ;CLEAR OC2F 
  378:     0243 FC 1018                        LDD   TOC2      ;SET UP FOR NEXT INTERRUPT
  379:     0246 C3 07D0                        ADDD  #T_BASE2  ;ADD TIMEBASE (1 MS)
  380:     0249 FD 1018                        STD   TOC2      ;AND STORE 
  381:                                 *----------------------------------------------
  382:     024C 7A 0002                        DEC   CNTR      ;DEC TIME BASE COUNTER
  383:     024F 3B                     OC2RTI  RTI             ;EXIT

Symbols:
baud                            *0000102b
begin                           *00000141
bit2                            *00000004
bit3                            *00000008
bit5                            *00000020
bit7                            *00000080
char_d                          *0000002f
char_t                          *0000002b
cntr                            *00000002
combase                         *0000b5f0
cont1                           *00000080
cont2                           *000000c0
count                           *00000030
count2                          *00000031
count3                          *00000032
data                            *00000000
datbase                         *0000b5f1
delay1                          *00000194
delay4                          *0000018b
fin                             *0000020f
four_ms                         *00000004
ic3                             *00000001
ic3_isr                         *0000022f
ic3_vec                         *000000e2
infra                           *0000019d
init_data                       *00000003
init_len                        *00000004
length                          *0000002c
length2                         *0000002d
line1                           *00000182
line2                           *00000179
loop3                           *0000015b
loopc2                          *0000018f
loopc3                          *00000198
loopy                           *00000219
m1                              *00000135
main                            *00000100
oc2_svc                         *0000023e
oc2_vec                         *000000dc
oc2f                            *00000040
oc2i                            *00000040
offset                          *00000001
one_s                           *000000fa
pos                             *0000002e
refresh                         *00000171
reg                             *00001000
reset                           *000001a4
s_len                           *00000213
s_len2                          *00000228
sccr1                           *0000102c
sccr2                           *0000102d
scdr                            *0000102f
sci_isr                         *000001d2
sci_vec                         *000000c4
scircv                          *000001ea
scitx                           *000001de
scroll                          *000001a6
scsr                            *0000002e
select                          *000001c0
t_base2                         *000007d0
tctl2                           *00001021
tflg1                           *00001023
tmsk1                           *00001022
toc2                            *00001018
update                          *00000000
word                            *00000019

